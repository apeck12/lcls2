if not platform: platform = '7'

ld_lib_path = f'LD_LIBRARY_PATH={CONDA_PREFIX}/epics/lib/linux-x86_64:{CONDA_PREFIX}/pcas/lib/linux-x86_64'
epics_env = 'EPICS_PVA_ADDR_LIST=172.21.151.255'+' '+ld_lib_path

hutch = 'tst'

#drp_nodes = ['002','003','004','005','008','009','011','013','014','015','017','018']
drp_nodes = ['004','008']

pyxpm_optsdb = '--db https://pswww.slac.stanford.edu/ws-auth/devconfigdb/ws/,configDB,tst,PROD -P DAQ:LAB2:XPM:%d'
pyxpm_opts = '-P DAQ:LAB2:XPM:%d'

base_host = 'daq-tst-dev02'
prom_dir = '/cds/group/psdm/psdatmgr/etc/config/prom' # Prometheus

# procmgr FLAGS: <port number> static port number to keep executable
#                              running across multiple start/stop commands.
#                "X" open xterm
#                "s" send signal to child when stopping
#
# HOST       UNIQUEID      FLAGS  COMMAND+ARGS
# list of processes to run
#   required fields: id, cmd
#   optional fields: host, port, flags, conda, env, rtprio
#     flags:
#        'x' or 'X'  -> xterm: open small or large xterm for process console
#        's'         -> stop: sends ctrl-c to process
#        'u'         -> uniqueid: use 'id' as detector alias (supported by acq, cam, camedt, evr, and simcam)

procmgr_config = [
 { host: base_host,  id:'pyxpm-2' , port:'29451', flags:'s', env:epics_env, cmd:'pyxpm --ip 10.0.2.102 '+pyxpm_optsdb%2},
 { host: base_host,  id:'pyxpm-1' , port:'29452', flags:'s', env:epics_env, cmd:'pyxpm --ip 10.0.1.103 '+pyxpm_opts%1},
 { host: base_host,  id:'pyxpm-3' , port:'29453', flags:'s', env:epics_env, cmd:'pyxpm --ip 10.0.2.107 '+pyxpm_opts%3},

## EPICS camera
 { host: base_host,  id:'pvcamcas', port:'29465', flags:'s', env:epics_env, cmd:'campvs -P DAQ:LAB2:PVCAM'},
 { host: 'daq-tst-dev03',  id:'pvcam', port:'29466', flags:'s', env:epics_env, cmd:'pvcam -p DAQ:LAB2:PVCAM -e 40'},

## EPICS PV exporter
 {                   id:'pvrtmon',  port:'29467', flags:'s', env:epics_env, cmd:f'epics_exporter -H {hutch} -M {prom_dir} -P DAQ:LAB2:XPM:2 RunTime Run NumL0Acc L0AccRate NumL0Inp L0InpRate DeadFrac'},
  ]

for n in drp_nodes:
    procmgr_config.append({host:'drp-tst-dev'+n, id:'pykcu-'+n, port:'29451', flags:'s', env:epics_env, cmd:'pykcu -P DAQ:LAB2'})

# HSD: 6.4 GS/s digitizer
bus  = 0
svc  = 1                        # 'port' is a reserved word
pv   = 2
hsds = [
    #{bus:'1b', svc:29074, pv:'DAQ:LAB2:HSD:DEV07_1B'},
    #{bus:'1a', svc:29076, pv:'DAQ:LAB2:HSD:DEV07_1A'},
    #{bus:'88', svc:29078, pv:'DAQ:LAB2:HSD:DEV07_88'},
    #{bus:'89', svc:29080, pv:'DAQ:LAB2:HSD:DEV07_89'},
    #{bus:'b1', svc:29082, pv:'DAQ:LAB2:HSD:DEV07_B1'},
    #{bus:'b2', svc:29084, pv:'DAQ:LAB2:HSD:DEV07_B2'},
    #{bus:'5e', svc:29086, pv:'DAQ:LAB2:HSD:DEV07_5E'},
    #{bus:'da', svc:29088, pv:'DAQ:LAB2:HSD:DEV07_DA'},
    #{bus:'3d', svc:29090, pv:'DAQ:LAB2:HSD:DEV07_3D'},
    {bus:'3e', svc:29092, pv:'DAQ:LAB2:HSD:DEV07_3E'},
]

for e in hsds:
    procmgr_config.append({ port:'%d'%(e[svc]+0), id:'hsdpvs_%s_a'%e[bus], flags:'s', env:epics_env, cmd:'hsdpvs -P '+e[pv]+':A'})
    procmgr_config.append({ port:'%d'%(e[svc]+1), id:'hsdpvs_%s_b'%e[bus], flags:'s', env:epics_env, cmd:'hsdpvs -P '+e[pv]+':B'})
